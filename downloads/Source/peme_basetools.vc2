*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="peme_basetools.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS peme_basetools AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "peme_basetools.h"
	*<DefinedPropArrayMethod>
		*m: addmrufile		&& Adds a file (or class within a file) to its appropriate VFP MRU list.  The last parameter is optional (can be inferred from the filename, after all)
		*m: checkoutscc
		*m: diskfilename		&& Returns the file name with the same case (upper/lower) as it is on disk.
		*m: editsourcex		&& Enhanced version of VFP's EditSource: maintains case of file name, adds to MRU list, optionally checks out from source control.  For classes, opens up class browser.  For PRGs and text files, start and end points of text to be selected may be supplied.
		*m: getcontrolcount		&& Returns the number of child objects in a container object
		*m: getmruid		&& Returns the name of the MRU list associated with a file name or extension)
		*m: getmrulist		&& Returns (as a collection) the list of all items for a particular MRU list.  <lcMRU_ID> may be the actual MRU name, a file name, or a file extension
		*m: getpemstatus
		*m: getrelativepath
		*m: isnamechar
		*m: openurl
		*m: release		&& Releases a FormSet or Form from memory.
		*m: showerrormsg
		*m: showhelp
		*m: striptabs
		*p: lreleaseondestroy
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	lreleaseondestroy = .F.
	Name = "peme_basetools"
	_memberdata = <VFPData>
		<memberdata name="addmrufile" display="AddMRUFile"/>
		<memberdata name="checkoutscc" display="CheckOutSCC"/>
		<memberdata name="diskfilename" display="DiskFileName"/>
		<memberdata name="editsourcex" display="EditSourceX"/>
		<memberdata name="getcontrolcount" display="GetControlCount"/>
		<memberdata name="getmruid" display="GetMRUID"/>
		<memberdata name="getmrulist" display="GetMRUList"/>
		<memberdata name="getpemstatus" display="GetPEMStatus"/>
		<memberdata name="getrelativepath" display="GetRelativePath"/>
		<memberdata name="isnamechar" display="IsNameChar"/>
		<memberdata name="openurl" display="OpenURL"/>
		<memberdata name="release" display="Release"/>
		<memberdata name="showerrormsg" display="ShowErrorMsg"/>
		<memberdata name="showhelp" display="ShowHelp"/>
		<memberdata name="striptabs" display="StripTabs"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE addmrufile		&& Adds a file (or class within a file) to its appropriate VFP MRU list.  The last parameter is optional (can be inferred from the filename, after all)
		Lparameters lcFileName, lcClassName, lcMRU_ID
		
		#Define DELIMITERCHAR  Chr(0)
		#Define MAXITEMS       24
		#Define ResourceAlias  crsr_MRU_Resource_Add
		
		Local lcData, lcLine25, lcNewData, lcSearchString, lcSourceFile, lnPos, lnSelect
		
		If 'ON' # Set ('Resource')
			Return
		Endif
		
		If lcFileName # '\-'
			lcFileName = This.DiskFileName(FullPath(lcFileName))
		EndIf
		
		lcSourceFile = Set ('Resource', 1)
		
		If Empty (lcMRU_ID)
			lcMRU_ID = This.GetMRUID (lcFileName)
			If '?' $ lcMRU_ID
				Return
			Endif
		Endif
		
		If lcMRU_ID = 'MRUI'
			If Empty (lcClassName) && Class library (artificial)
				lcMRU_ID	   = 'MRU2'
				lcSearchString = lcFileName + DELIMITERCHAR
			Else
				lcSearchString = lcFileName + '|' + Lower (lcClassName) + DELIMITERCHAR
			Endif
		Else
			lcSearchString = lcFileName + DELIMITERCHAR
		Endif
		
		lnSelect = Select()
		Select 0
		Use (lcSourceFile) Again Shared Alias ResourceAlias
		
		Locate For Id = lcMRU_ID
		If Found()
			lcData = DELIMITERCHAR + Substr (Data, 3)
			lnPos  = Atcc (DELIMITERCHAR + lcSearchString, lcData)
			Do Case
				Case lnPos = 1
					* already tops of the list
					lcNewData = Data
				Case lnPos = 0
					* must add to list
					lcNewData = Stuff (Data, 3, 0, lcSearchString)
					* note that GetWordNum won't accept CHR(0) as a delimiter
					lcLine25  = Getwordnum (Chrtran (Substr (lcNewData, 3), DELIMITERCHAR, ccCR), MAXITEMS + 1, ccCR)
					If Not Empty (lcLine25)
						lcNewData = Strtran (lcNewData, DELIMITERCHAR + lcLine25 + DELIMITERCHAR, DELIMITERCHAR, 1, 1, 1)
					Endif
				Otherwise
					lcNewData = Stuff (Data, lnPos + 1, Len (lcSearchString), '')
					lcNewData = Stuff (lcNewData, 3, 0, lcSearchString)
			Endcase
			Replace																;
					Data	 With  lcNewData									;
					ckval	 With  Val (Sys(2007, Substr (lcNewData, 3)))		;
					Updated	 With  Date()
		Else
			lcNewData = Chr(4) + DELIMITERCHAR + lcSearchString
			Insert Into ResourceAlias					;
				(Type, Id, ckval, Data, Updated)		;
				Values									;
				('PREFW', lcMRU_ID, Val (Sys(2007, Substr (lcNewData, 3))), lcNewData, Date())
		
			****************************************************************
		Endif
		
		Use
		Select (lnSelect)
		
		Return
		
	ENDPROC

	PROCEDURE checkoutscc
		Lparameters lcFileName
		
		Local lnSelect 
		
		*** JRN 11/17/2010 : Bhavbhuti: Source Control
		* Select 0 -- used because it appears that CheckOut may kill current work area
		If 'O' = Type ('This.oPrefs') And This.oPrefs.lCheckOutSCC And 0 # _vfp.Projects.Count
			lnSelect = Select()
			Select 0
			Try
				If Not Inlist (_vfp.ActiveProject.Files (m.lcFileName).SCCStatus, 0, 2)
					If Not _vfp.ActiveProject.Files (m.lcFileName).CheckOut()
		
					Endif
				Endif
		    Catch to loException
		        Do Case
		            Case loException.ErrorNo = 1943 && if not found in this project
		            Case loException.ErrorNo = 1426 && OLE error code 0x85ff012e: Unknown COM status code
		                _vfp.ActiveProject.Files (m.lcFileName).CheckOut()
		        Otherwise
		            This.ShowErrorMsg(loException)
		        EndCase
		    EndTry
		    Select (lnSelect)
		Endif
		
		
	ENDPROC

	PROCEDURE Destroy
		This.Release()
		
	ENDPROC

	PROCEDURE diskfilename		&& Returns the file name with the same case (upper/lower) as it is on disk.
		Lparameters lcFileName
		
		#Define MAX_PATH 260
		
		Local lnFindFileData, lnHandle, lcXXX
		Declare Integer FindFirstFile In win32api String @, String @
		Declare Integer FindNextFile In win32api Integer, String @
		Declare Integer FindClose In win32api Integer
		
		Do Case
			Case ( Right (lcFileName, 1) == '\' )
				Return Addbs (This.DiskFileName (Left (lcFileName, Len (lcFileName) - 1)))
		
			Case Empty (lcFileName)
				Return ''
		
			Case ( Len (lcFileName) == 2 ) And ( Right (lcFileName, 1) == ':' )
				Return Upper (lcFileName)	&& win2k gives curdir() for C:
		Endcase
		
		lnFindFileData = Space(4 + 8 + 8 + 8 + 4 + 4 + 4 + 4 + MAX_PATH + 14)
		lnHandle		 = FindFirstFile (@lcFileName, @lnFindFileData)
		
		If ( lnHandle < 0 )
			If ( Not Empty (Justfname (lcFileName)) )
				lcXXX = Justfname (lcFileName)
			Else
				lcXXX = lcFileName
			Endif
		Else
			= FindClose (lnHandle)
			lcXXX	= Substr (lnFindFileData, 45, MAX_PATH)
			lcXXX	= Left (lcXXX, At (Chr(0), lcXXX) - 1)
		Endif
		
		
		Do Case
			Case Empty (Justpath (lcFileName))
				Return lcXXX
			Case ( Justpath (lcFileName) == '\' ) And (Left (lcFileName, 2) == '\\')	&& unc
				Return '\\' + lcXXX
			Otherwise
				Return Addbs (This.DiskFileName (Justpath (lcFileName))) + lcXXX
		Endcase
		
		Return
		
	ENDPROC

	PROCEDURE editsourcex		&& Enhanced version of VFP's EditSource: maintains case of file name, adds to MRU list, optionally checks out from source control.  For classes, opens up class browser.  For PRGs and text files, start and end points of text to be selected may be supplied.
		Lparameters lcFileName, lcClass, lnStartRange, lnEndRange
		
		Local lcExt, loException
		
		lcFileName = This.DiskFileName (Trim (lcFileName))
		lcClass	   = Trim (Evl (lcClass, ''))
		lcExt	   = Upper (Justext (lcFileName))
		This.AddMRUFile (lcFileName, lcClass)
		
		Try
			Do Case
				Case lcExt = 'PJX'
					Modify Project (lcFileName) Nowait
				Case lcExt = 'VCX' And Empty (lcClass)
					This.CheckOutSCC (lcFileName)
					Do (_Browser) With (lcFileName)
				Otherwise
					This.CheckOutSCC (lcFileName)
					Do Case
						Case Not Empty (lcClass)
							Editsource (lcFileName, 0, lcClass)
						Case 'N' = Vartype (lnStartRange)
							If 'PRG' == lcExt
								Modify Command (lcFileName) Range lnStartRange, lnEndRange Nowait
							Else
								Modify File (lcFileName) Range lnStartRange, lnEndRange Nowait
							Endif
						Case (' ' + lcExt + ' ') $ ' PRG MPR QPR TXT H INI SCX VCX FRX LBX MNX DBC '
							Editsource (lcFileName)
						Otherwise
							This.OpenURL (lcFileName)
					Endcase
			Endcase
		Catch To loException
			This.ShowErrorMsg (loException)
		Endtry
		
		
	ENDPROC

	PROCEDURE getcontrolcount		&& Returns the number of child objects in a container object
		Lparameters loObject
		Local lnCount
		
		With loObject
			Do Case
				Case Not This.GetPEMStatus(loObject, 'Objects', 5)
					lnCount = 0
				Case This.GetPEMStatus(loObject, 'ControlCount', 5)
					lnCount = .ControlCount
				Case Inlist(Lower(.BaseClass),[pageframe])
					lnCount = .PageCount
				Case Inlist(Lower(.BaseClass),[grid])
					lnCount = .ColumnCount
				Case Inlist(Lower(.BaseClass),[optiongroup],[commandgroup])
					lnCount = .ButtonCount
				Case Inlist(Lower(.BaseClass),[formset])
					lnCount = .FormCount
				Case Inlist(Lower(.BaseClass),[dataenvironment])
					lnCount = 0
					Do While 'O' = Type(".Objects(lnCount + 1)")
						lnCount = lnCount + 1
					Enddo
				Otherwise
					lnCount = 0
			Endcase
		Endwith
		
		Return lnCount
		
	ENDPROC

	PROCEDURE getmruid		&& Returns the name of the MRU list associated with a file name or extension)
		Lparameters lcFileName
		
		Local lcExt, lcList, lcMRU_ID, lnPos
		lcExt = Upper (Justext ('.' + lcFileName))
		
		lcList = ',VCX=MRUI,PRG=MRUB,MPR=MRUB,QPR=MRUB,SCX=MRUH,MNX=MRUE,FRX=MRUG,DBF=MRUS,DBC=???,LBX=???,PJX=MRUL'
		lnPos  = At (',' + lcExt + '=', lcList)
		If lnPos = 0
			lcMRU_ID = 'MRUC'
		Else
			lcMRU_ID = Substr (lcList, lnPos + 5, 4)
		Endif
		
		Return lcMRU_ID 
	ENDPROC

	PROCEDURE getmrulist		&& Returns (as a collection) the list of all items for a particular MRU list.  <lcMRU_ID> may be the actual MRU name, a file name, or a file extension
		Lparameters lcMRU_ID
		
		#Define DELIMITERCHAR Chr(0)
		
		Local loCollection As 'Collection'
		Local laItems(1), lcData, lcList, lcSourceFile, lnI, lnPos, lnSelect
		
		loCollection = Createobject ('Collection')
		
		If 'ON' # Set ('Resource')
			Return loCollection
		Endif
		
		lnSelect	 = Select()
		lcSourceFile = Set ('Resource', 1)
		Select 0
		Use (lcSourceFile) Again Shared Alias MRU_Resource
		
		If lcMRU_ID # 'MRU'
			lcMRU_ID = This.GetMRUID (lcMRU_ID)
			If '?' $ lcMRU_ID
				Return
			Endif
		Endif
		
		Locate For Id = lcMRU_ID
		If Found()
			lcData = Data
			Alines (laItems, Substr (lcData, 3), 0, DELIMITERCHAR)
			For lnI = 1 To Alen (laItems)
				If Not Empty (laItems (lnI))
					loCollection.Add (laItems (lnI))
				Endif
			Endfor
		Endif
		
		Use
		Select (lnSelect)
		Return loCollection
		
		
	ENDPROC

	PROCEDURE getpemstatus
		Lparameters loObject, lcPEM, nAttribute
		
		If Upper(loObject.BaseClass) = 'OLE'
		
			Local laMembers(1), lnRow
			Amembers(laMembers, loObject, 1, 'PHG#')
			lnRow = Ascan(laMembers, lcPEM, -1, -1, 1, 15)
		
			Do Case
				Case lnRow = 0
					Return .F.
				Case nAttribute = 0 && changed
					Return 'C' $ laMembers(lnRow,3)
				Case nAttribute = 1 && readonly
					Return 'R' $ laMembers(lnRow,3)
				Case nAttribute = 2 && protected
					Return 'P' $ laMembers(lnRow,3)
				Case nAttribute = 3 && type
					Return laMembers(lnRow,2)
				Case nAttribute = 4 && user-defined
					Return 'U' $ laMembers(lnRow,3)
				Case nAttribute = 5 && defined
					Return .T.
				Case nAttribute = 6 && inherited
					Return 'I' $ laMembers(lnRow,3)
			Endcase
		
		Else
		
			Return Pemstatus (loObject, lcPEM, nAttribute)
		
		Endif
		
	ENDPROC

	PROCEDURE getrelativepath
		Lparameters lcName, lcPath
		Local lcNew, lnPos
		If Empty (lcPath)
			lcNew = Sys(2014, lcName)
		Else
			lcNew = Sys(2014, lcName, lcPath)
		Endif
		
		If Len (lcNew) < Len (lcName)
			lnPos = Rat ('..\', lcNew)
			If lnPos # 0
				lnPos = lnPos + 2
			Endif
			Return Left (lcNew, lnPos) + Right (lcName, Len (lcNew) - lnPos)
		Else
			Return lcName
		EndIf 
		
	ENDPROC

	PROCEDURE isnamechar
		Lparameters lcChar
		
		Return Isalpha (lcChar) Or Isdigit (lcChar) Or lcChar = '_'
		
	ENDPROC

	PROCEDURE openurl
		******************
		***    Author: Rick Strahl
		***            (c) West Wind Technologies, 1996
		***   Contact: rstrahl@west-wind.com
		***  Modified: 03/14/96
		***  Function: Starts associated Web Browser
		***            and goes to the specified URL.
		***            If Browser is already open it
		***            reloads the page.
		***    Assume: Works only on Win95 and NT 4.0
		***      Pass: tcUrl  - The URL of the site or
		***                     HTML page to bring up
		***                     in the Browser
		***    Return: 2  - Bad Association (invalid URL)
		***            31 - No application association
		***            29 - Failure to load application
		***            30 - Application is busy 
		***
		***            Values over 32 indicate success
		***            and return an instance handle for
		***            the application started (the browser) 
		****************************************************
		LPARAMETERS tcUrl, tcAction, tcDirectory, tcParms
		
		IF EMPTY(tcUrl)
		   RETURN -1
		ENDIF
		IF EMPTY(tcAction)
		   tcAction = "OPEN"
		ENDIF
		IF EMPTY(tcDirectory)
		   tcDirectory = SYS(2023) 
		ENDIF
		
		DECLARE INTEGER ShellExecute ;
		    IN SHELL32.dll ;
		    INTEGER nWinHandle,;
		    STRING cOperation,;
		    STRING cFileName,;
		    STRING cParameters,;
		    STRING cDirectory,;
		    INTEGER nShowWindow
		IF EMPTY(tcParms)
		   tcParms = ""
		ENDIF
		
		DECLARE INTEGER FindWindow ;
		   IN WIN32API ;
		   STRING cNull,STRING cWinName
		
		RETURN ShellExecute(0,;
		                    tcAction,tcUrl,;
		                    tcParms,tcDirectory,1)
		
	ENDPROC

	PROCEDURE release		&& Releases a FormSet or Form from memory.
		Local laMembers(1), lcMember
		Amembers (laMembers, This, 0)
		For Each lcMember In laMembers
			lcMember = Upper (lcMember)
			If lcMember = 'O' And Pemstatus(This, lcMember, 4) And 'O' = Vartype (Getpem (This, lcMember))
				If This.lReleaseOnDestroy
					Try
						This.&lcMember..Release()
					Catch
					Endtry
				Endif
				This.&lcMember. = .Null.
			Endif
		Endfor
		
	ENDPROC

	PROCEDURE showerrormsg
		Lparameters loException, lcTitleBar, lcPRGName, lcAddlInfo
		
		Messagebox ('Error: ' + Transform (loException.ErrorNo) 	+ ccCRLF +							;
			  'Message: ' + loException.Message 					+ ccCRLF +							;
			  'Procedure: ' + IIf (Empty (lcPRGName), loException.Procedure, Justfname (lcPRGName)) + ccCRLF + ;
			  'Line: ' + Transform (loException.Lineno) 			+ ccCRLF +							;
			  'Code: ' + loException.LineContents														;
			  + IIf (Empty (lcAddlInfo), '', ccCRLF + 'NOTES: ' + lcAddlInfo)							;
			  , MB_OK + MB_ICONEXCLAMATION, Evl (lcTitleBar, 'Error'))
		
		
	ENDPROC

	PROCEDURE showhelp
		Lparameters lnHelpID
		
		Local lcCurrentHelpFile, lcHelpFile, lcPath
		
		lcCurrentHelpFile = Set("Help",1)
		
		lcPath = This.cApplicationPath
		lcHelpFile = lcPath + "PemEditor.CHM"
		
		*** JRN 2010-05-06 : Remove security warning; from http://www.foxpert.com/knowlbits_200906_1.htm
		If File(lcHelpFile)
			PEME_RemSecurityWarning(lcHelpFile)
		
			Set Help To (lcHelpFile)
		
			If Empty (lnHelpID)
				Help
			Else
				Help Id (lnHelpID)
			Endif
		Endif
		
		Set Help To (lcCurrentHelpFile)
		
	ENDPROC

	PROCEDURE striptabs
		Lparameters cAbstract
		
		* Abstract:
		*   Replace all tabs with spaces; also removes leading / trailing blanks
		*
		* Parameters:
		*	<cAbstract> = string to strip tabs/spaces from
		Return Alltrim (Chrtran (m.cAbstract, ccTab, ' '))
		
		
	ENDPROC

ENDDEFINE
